// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpfsock

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadToy_proxy_bpf_sock returns the embedded CollectionSpec for toy_proxy_bpf_sock.
func loadToy_proxy_bpf_sock() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Toy_proxy_bpf_sockBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load toy_proxy_bpf_sock: %w", err)
	}

	return spec, err
}

// loadToy_proxy_bpf_sockObjects loads toy_proxy_bpf_sock and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*toy_proxy_bpf_sockObjects
//	*toy_proxy_bpf_sockPrograms
//	*toy_proxy_bpf_sockMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadToy_proxy_bpf_sockObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadToy_proxy_bpf_sock()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// toy_proxy_bpf_sockSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type toy_proxy_bpf_sockSpecs struct {
	toy_proxy_bpf_sockProgramSpecs
	toy_proxy_bpf_sockMapSpecs
}

// toy_proxy_bpf_sockSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type toy_proxy_bpf_sockProgramSpecs struct {
	Sock4Connect *ebpf.ProgramSpec `ebpf:"sock4_connect"`
}

// toy_proxy_bpf_sockMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type toy_proxy_bpf_sockMapSpecs struct {
}

// toy_proxy_bpf_sockObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadToy_proxy_bpf_sockObjects or ebpf.CollectionSpec.LoadAndAssign.
type toy_proxy_bpf_sockObjects struct {
	toy_proxy_bpf_sockPrograms
	toy_proxy_bpf_sockMaps
}

func (o *toy_proxy_bpf_sockObjects) Close() error {
	return _Toy_proxy_bpf_sockClose(
		&o.toy_proxy_bpf_sockPrograms,
		&o.toy_proxy_bpf_sockMaps,
	)
}

// toy_proxy_bpf_sockMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadToy_proxy_bpf_sockObjects or ebpf.CollectionSpec.LoadAndAssign.
type toy_proxy_bpf_sockMaps struct {
}

func (m *toy_proxy_bpf_sockMaps) Close() error {
	return _Toy_proxy_bpf_sockClose()
}

// toy_proxy_bpf_sockPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadToy_proxy_bpf_sockObjects or ebpf.CollectionSpec.LoadAndAssign.
type toy_proxy_bpf_sockPrograms struct {
	Sock4Connect *ebpf.Program `ebpf:"sock4_connect"`
}

func (p *toy_proxy_bpf_sockPrograms) Close() error {
	return _Toy_proxy_bpf_sockClose(
		p.Sock4Connect,
	)
}

func _Toy_proxy_bpf_sockClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed toy_proxy_bpf_sock_bpfel_x86.o
var _Toy_proxy_bpf_sockBytes []byte
